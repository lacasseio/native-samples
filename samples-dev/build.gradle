import org.gradle.samples.plugins.generators.CppLibraryTemplate
import org.gradle.samples.plugins.generators.SwiftLibraryTemplate

plugins {
    id "groovy"
    id "idea"
    id "org.gradle.samples.generators"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation gradleTestKit()
    testImplementation platform("org.spockframework:spock-bom:2.3-groovy-3.0")
    testImplementation "org.spockframework:spock-core"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
    testImplementation "com.atlassian.commonmark:commonmark:0.10.0"
}

def supportedLanguages = [file("../swift"), file("../cpp"), file("../c")]

tasks.named('test', Test) {
    useJUnitPlatform()
    // maxParallelForks = gradle.startParameter.maxWorkerCount
    inputs.files files(supportedLanguages).asFileTree.matching { PatternFilterable pattern ->
        pattern.exclude "**/build", "**/.gradle", "**/*.xcworkspace", "**/*.xcodeproj", "**/repo"
    }
    systemProperty 'rootSampleDir', rootDir
}

task cleanMavenRepo(type: Delete) {
    delete file("../cpp/repo")
}

tasks.cleanSamples {
    dependsOn cleanMavenRepo
}

tasks.clean {
    dependsOn cleanSamples, cleanMavenRepo
}

def cppUtilsLib = CppLibraryTemplate.of("cpp-lib-with-api-dep", "utilities")
def cppListLib = CppLibraryTemplate.of("cpp-lib", "list")
def cppMessageLib = CppLibraryTemplate.of("cpp-message-api", "message")

def swiftUtilsLib = SwiftLibraryTemplate.of("swift-lib-with-api-dep", "Utilities")
def swiftListLib = SwiftLibraryTemplate.of("swift-lib", "List")

samples {
    externalRepos.register("nativeSamplesCppLibrary") {
        repoUrl = "git@github.com:gradle/native-samples-cpp-library.git"
        copySource {
            project(".").fromTemplate("cpp-build-with-list-and-utilities-libraries")
            libProject("list").fromTemplate(cppListLib)
            libProject("utilities").fromTemplate(cppUtilsLib)
        }

        def brokenCode = """// BUG: i = 1 should be i = 0
    for (int i = 1; i < source.size(); ++i) {"""
        def goodCode = 'for (int i = 0; i < source.size(); ++i) {'

        change { ch ->
            changeContent("utilities/src/main/cpp/join.cpp", goodCode, brokenCode)
            tag("1.0")
            message("initial version")
        }
        change { ch ->
            changeContent("utilities/src/main/cpp/join.cpp", brokenCode, goodCode)
            changeContent("build.gradle", "version = '1.0'", "version = '1.1'")
            tag("1.1")
            message("fixed bug")
        }
    }

    externalRepos.register("nativeSamplesSwiftLibrary") {
        repoUrl = "git@github.com:gradle/native-samples-swift-library.git"
        copySource {
            project(".").fromTemplate("swift-build-with-list-and-utilities-libraries")
            libProject("list").fromTemplate(swiftListLib)
            libProject("utilities").fromTemplate(swiftUtilsLib)
        }
        def goodCode = "var i = 0"
        def badCode = """// BUG: i = 1 should be i = 0
        var i = 1"""
        change { ch ->
            changeContent("utilities/src/main/swift/Util.swift", goodCode, badCode)
            tag("1.0")
            message("initial version")
        }
        change { ch ->
            changeContent("utilities/src/main/swift/Util.swift", badCode, goodCode)
            changeContent("build.gradle", "version = '1.0'", "version = '1.1'")
            tag("1.1")
            message("fixed bug")
        }
    }
}
